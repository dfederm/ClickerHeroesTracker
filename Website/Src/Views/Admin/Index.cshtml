@using ClickerHeroesTrackerWebsite.Services.UploadProcessing

@inject IContentManager ContentManager

@{
    ViewBag.Title = "Admin";

    ContentManager.RegisterScript("Admin");
}

<h2>Admin</h2>

@if (@ViewBag.Message != null)
{
    <p class="text-success">@ViewBag.Message</p>
}

@if (@ViewBag.Error != null)
{
    <p class="text-danger">@ViewBag.Error</p>
}

<h3>Commands</h3>
<div class="row">
    <div class="col-md-4">
        Recalculate computed stats for an upload.
        @using (Html.BeginForm("UpdateComputedStats", "Admin", FormMethod.Get, new { @class = "form-horizontal", role = "form" }))
        {
            <dl class="dl-horizontal">
                <dt>Upload Ids</dt>
                <dd>
                    <input type="text" name="uploadIds" class="input-sm" />
                    <div class="text-muted">
                        Use commas to separate the Ids.
                    </div>
                </dd>
            </dl>
            <dl class="dl-horizontal">
                <dt>Queue Priority</dt>
                <dd>
                    <select name="priority" class="input-sm">
                        @foreach (var queue in this.ViewBag.Queues)
                        {
                            <option value="@queue.Key">@queue.Key (~@queue.Value messages)</option>
                        }
                    </select>
                </dd>
            </dl>
            <dl class="dl-horizontal">
                <dt></dt>
                <dd>
                    <input type="submit" class="btn btn-default" value="Recompute" />
                </dd>
            </dl>
        }
    </div>
    <div class="col-md-4">
        Clear upload processing queue.
        @using (Html.BeginForm("ClearQueue", "Admin", FormMethod.Get, new { @class = "form-horizontal", role = "form" }))
        {
            <dl class="dl-horizontal">
                <dt>Queue Priority</dt>
                <dd>
                    <select name="priority" class="input-sm">
                        @foreach (var queue in this.ViewBag.Queues)
                        {
                            <option value="@queue.Key">@queue.Key (~@queue.Value messages)</option>
                        }
                    </select>
                </dd>
            </dl>
            <dl class="dl-horizontal">
                <dt></dt>
                <dd>
                    <input type="submit" class="btn btn-default" value="Clear" />
                </dd>
            </dl>
        }
    </div>
    <div class="col-md-4">
        Stale uploads (anonymous only).
        <div>
            @if (ViewBag.StaleUploads == null)
            {
                @using (Html.BeginForm("GetStaleAnonymousUploads", "Admin", FormMethod.Get, new { @class = "form-horizontal", role = "form" }))
                {
                    <input type="submit" class="btn btn-default" value="Fetch" />
                }
            }
            else
            {
                <div>
                    <script type="text/javascript">
                        var staleUploads = @Json.Serialize(ViewBag.StaleUploads);
                    </script>
                    <div class="progress">
                        <div id="deleteStaleUploadsProgress" class="progress-bar progress-bar-striped active" role="progressbar" aria-valuenow="45" aria-valuemin="0" aria-valuemax="100">
                            0%
                        </div>
                    </div>
                    <input id="deleteStaleUploads" type="submit" class="btn btn-default" value="Delete" />
                </div>
            }
        </div>
    </div>
</div>
