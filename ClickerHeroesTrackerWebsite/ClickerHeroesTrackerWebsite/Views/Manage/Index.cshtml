@using ClickerHeroesTrackerWebsite.Models

@model IndexViewModel
@{
    ViewBag.Title = "Manage";
}

<h2>@ViewBag.Title.</h2>

@{
    var checkedAttribute = new { @checked = "1" };
}


<p class="text-success">@ViewBag.StatusMessage</p>
<div>
    <h4>Change your account settings</h4>
    <hr />
    <dl class="dl-horizontal">
        <dt>Password:</dt>
        <dd>
            [
            @if (Model.HasPassword)
            {
                @Html.ActionLink("Change your password", "ChangePassword")
            }
            else
            {
                @Html.ActionLink("Create", "SetPassword")
            }
            ]
        </dd>
        <dt>External Logins:</dt>
        <dd>
            @Model.Logins.Count [
            @Html.ActionLink("Manage", "ManageLogins") ]
        </dd>
    </dl>
    <hr />
    @using (Html.BeginForm("Index", "Manage", FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
    {
        @Html.AntiForgeryToken()
        <dl class="dl-horizontal">
            <dt>@Html.LabelFor(m => m.TimeZoneId)</dt>
            <dd>
                @Html.DropDownListFor(m => m.TimeZoneId, new SelectList(IndexViewModel.TimeZones, "Id", "Name", Model.TimeZoneId), new { @class = "input-sm" })
                <button id="autodetectTimeZone" class="btn btn-default">Autodetect</button>
            </dd>
        </dl>
        <dl class="dl-horizontal">
            <dt>
                @Html.LabelFor(m => m.AreUploadsPublic)
                <a href="#" class="text-muted" data-toggle="tooltip" data-placement="bottom" title="Allow your uploads to be viewed by others if you choose to share the url with them">(?)</a>
            </dt>
            <dd>
                @Html.CheckBoxFor(m => m.AreUploadsPublic, Model.AreUploadsPublic ? checkedAttribute : null)
            </dd>
        </dl>
        <dl class="dl-horizontal">
            <dt>
                @Html.LabelFor(m => m.SolomonFormula)
            </dt>
            <dd>
                @Html.RadioButtonFor(m => m.SolomonFormula, "Ln", Model.SolomonFormula.Equals("Ln", StringComparison.OrdinalIgnoreCase) ? checkedAttribute : null)
                Ln <a href="#" class="text-muted" data-toggle="tooltip" data-placement="right" title="This formula is for optimal efficiency, but some consider it more boring as it causes you to dump many levels into Solomon">(?)</a>
                <br />
                @Html.RadioButtonFor(m => m.SolomonFormula, "Log", Model.SolomonFormula.Equals("Log", StringComparison.OrdinalIgnoreCase) ? checkedAttribute : null)
                Log <a href="#" class="text-muted" data-toggle="tooltip" data-placement="right" title="This formula favors Solomon a little less. It's less efficient than the Ln formula, but some consider it more exciting as you will spend less time dumping levels into Solomon">(?)</a>
            </dd>
        </dl>
        <dl class="dl-horizontal">
            <dt>
                @Html.LabelFor(m => m.PlayStyle)
                <a href="https://www.reddit.com/r/ClickerHeroes/wiki/introduction#wiki_types_of_playstyle_builds" target="_blank" class="text-muted" data-toggle="tooltip" data-placement="bottom" title="This is how you play the game. Click for details on Idle and Active. Hybrid is basically Idle but using all cooldowns before ascending.">(?)</a>
            </dt>
            <dd>
                @foreach (var enumValue in Enum.GetNames(typeof(PlayStyle)))
                {
                    @Html.RadioButtonFor(m => m.PlayStyle, enumValue, Model.PlayStyle.Equals(enumValue, StringComparison.OrdinalIgnoreCase) ? checkedAttribute : null);
                    @enumValue;
                    <br />
                }
            </dd>
        </dl>
        <dl class="dl-horizontal">
            <dt>
                @Html.LabelFor(m => m.UseExperimentalStats)
                <a href="#" class="text-muted" data-toggle="tooltip" data-placement="bottom" title="This will show you experimental stats which may not be fully fleshed out and data availability may be spotty. Consider these &quot;beta&quot; features">(?)</a>
            </dt>
            <dd>
                @Html.CheckBoxFor(m => m.UseExperimentalStats, Model.UseExperimentalStats ? checkedAttribute : null)
            </dd>
        </dl>
        <dl class="dl-horizontal">
            <dt>
                @Html.LabelFor(m => m.Prefer30MinuteRuns)
                <a href="#" class="text-muted" data-toggle="tooltip" data-placement="bottom" title="This is less optimal mathematically, but some players prefer the &quot;30 minute rule&quot; for run length.">(?)</a>
            </dt>
            <dd>
                @Html.CheckBoxFor(m => m.Prefer30MinuteRuns, Model.Prefer30MinuteRuns ? checkedAttribute : null)
            </dd>
        </dl>
        <dl class="dl-horizontal">
            <dt></dt>
            <dd>
                <input type="submit" class="btn btn-default" value="Save Changes" />
            </dd>
        </dl>
    }
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    @* Detect user's timezone *@
    <script type="text/javascript">
        var timeZoneMapping =
        {
            @foreach(var timeZone in TimeZoneInfo
                .GetSystemTimeZones()
                .GroupBy(tz => tz.GetUtcOffset(DateTime.UtcNow))
                .Select(grp => new KeyValuePair<string, string>(grp.Key.TotalMinutes.ToString(), grp.First().Id)))
            {
                <text>"</text>@timeZone.Key<text>":"</text>@timeZone.Value<text>",</text>
            }
        };

        $("#autodetectTimeZone").click(function (evt)
        {
            $("#TimeZoneId").val(timeZoneMapping[-new Date().getTimezoneOffset()]);

            // Don't submit the form
            evt.preventDefault();
        });
    </script>

    @* Wire up tooltips *@
    <script type="text/javascript">
        $('[data-toggle="tooltip"]').tooltip();
    </script>

}
