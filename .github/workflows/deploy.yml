name: Build, Test, and Deploy

on:
  push:
    branches:
      - main
  # Allow manually triggering
  workflow_dispatch:

jobs:
  Website:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@main
    - name: Setup .NET
      uses: actions/setup-dotnet@v1.9.1
      with:
        dotnet-version: '6.x'
    - name: Restore NuGet packages
      run: dotnet restore
    - name: Build
      run: dotnet build --configuration Release --no-restore
    - name: Test
      run: dotnet test --configuration Release --no-build --logger trx --results-directory TestResults --collect:"XPlat Code Coverage"
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2.1.0
      with:
        directory: ./TestResults
        flags: Website
    - name: Upload test results
      uses: actions/upload-artifact@v2
      with:
        name: website-test-results
        path: ./TestResults
      if: ${{ always() }} # Always run this step even on failure
    - name: Publish
      run: dotnet publish Website/Src --configuration Release --runtime linux-x64 --self-contained true -p:PublishReadyToRun=true -p:PublishSingleFile=true --no-restore --output artifacts
    - name: Upload published website
      uses: actions/upload-artifact@v2
      with:
        name: website-artifacts
        path: ./artifacts
      if: ${{ always() }} # Always run this step even on failure
  WebClient:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@main
    - name: Setup Node.js
      uses: actions/setup-node@v2.5.1
      with:
        node-version: '17.x'
    - name: Install npm packages
      run: npm ci
      working-directory: ./WebClient
    - name: Build
      run: npm run build
      working-directory: ./WebClient
    - name: Test
      run: npm run coverage
      working-directory: ./WebClient
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2.1.0
      with:
        files: ./WebClient/logs/coverage/cobertura.xml
        flags: WebClient
        fail_ci_if_error: true
    - name: Upload logs
      uses: actions/upload-artifact@v2
      with:
        name: webclient-logs
        path: ./WebClient/logs
      if: ${{ always() }} # Always run this step even on failure
    - name: Upload published web client
      uses: actions/upload-artifact@v2
      with:
        name: webclient-artifacts
        path: ./WebClient/dist
      if: ${{ always() }} # Always run this step even on failure
  Deploy:
    runs-on: ubuntu-latest
    needs: [Website, WebClient]
    steps:
    - name: Checkout repository
      uses: actions/checkout@main
    - name: Download website
      uses: actions/download-artifact@v2
      with:
        name: website-artifacts
        path: ./deploy
    - name: Download web client
      uses: actions/download-artifact@v2
      with:
        name: webclient-artifacts
        path: ./deploy/wwwroot
    - name: Create build info
      shell: pwsh
      run: |
        ./build/CreateBuildInfo.ps1 `
          -SourceVersion "$Env:GITHUB_SHA" `
          -BuildUrl "$Env:GITHUB_SERVER_URL/$Env:GITHUB_REPOSITORY/actions/runs/$Env:GITHUB_RUN_ID" `
          -WebClientDirectory ./deploy/wwwroot `
          -OutputDirectory ./deploy
    - name: Deploy to Azure WebApps (staging slot)
      uses: azure/webapps-deploy@v2
      with:
        app-name: ClickerHeroesTracker
        slot-name: staging
        publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE_STAGING }}
        package: ./deploy
    - name: Post-deploy
      shell: pwsh
      run: |
        ./build/PostDeploy.ps1 `
          -WebsiteName ClickerHeroesTracker `
          -Slot staging
    # There is not an action to directly slot-swap, so use the Azure CLI
    - name: Log into Azure CLI
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    - name: Swap staging slot to production slot
      run: |
        az webapp deployment slot swap -g default -n ClickerHeroesTracker --slot staging